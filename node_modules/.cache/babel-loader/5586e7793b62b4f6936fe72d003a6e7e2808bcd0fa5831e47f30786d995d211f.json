{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\simon\\\\Documents\\\\Codecademy\\\\AppointmentPlanner\\\\src\\\\containers\\\\contactsPage\\\\ContactsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\nimport { TileList } from \"../../components/tileList/TileList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactsPage = _ref => {\n  _s();\n  let {\n    contacts,\n    addContacts\n  } = _ref;\n  /* Define state variables for contact info and duplicate check */\n  const [name, setName] = useState('');\n  const [phoneNumber, setPhoneNumber] = useState('');\n  const [email, setEmail] = useState('');\n  const [duplicate, setDuplicate] = useState(false);\n  const handleSubmit = e => {\n    e.preventDefault();\n    /* Add contact info and clear data if the contact name is not a duplicate */\n    if (!duplicate) {\n      addContacts(name, phoneNumber, email);\n      setName('');\n      setPhoneNumber('');\n      setEmail('');\n    }\n  };\n\n  /* Using hooks, check for contact name in the contacts array variable in props */\n  useEffect(() => {\n    const nameIsDuplicate = () => {\n      const found = contacts.find(contact => contact.name === name);\n      if (found) {\n        return true;\n      } else {\n        return false;\n      }\n    };\n    if (nameIsDuplicate()) {\n      setDuplicate(true);\n    } else {\n      setDuplicate(false);\n    }\n  }, [name, contacts, duplicate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Add Contact\", duplicate ? \" - Name Already Exists\" : \"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContactForm, {\n        name: name,\n        setName: setName,\n        phoneNumber: phoneNumber,\n        setPhoneNumber: setPhoneNumber,\n        email: email,\n        setEmail: setEmail,\n        handleSubmit: handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TileList, {\n        tiles: contacts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(ContactsPage, \"RIOrmY1GxEuIKU76e8j/c+tbHlg=\");\n_c = ContactsPage;\nvar _c;\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"names":["React","useState","useEffect","ContactForm","TileList","jsxDEV","_jsxDEV","ContactsPage","_ref","_s","contacts","addContacts","name","setName","phoneNumber","setPhoneNumber","email","setEmail","duplicate","setDuplicate","handleSubmit","e","preventDefault","nameIsDuplicate","found","find","contact","children","fileName","_jsxFileName","lineNumber","columnNumber","tiles","_c","$RefreshReg$"],"sources":["C:/Users/simon/Documents/Codecademy/AppointmentPlanner/src/containers/contactsPage/ContactsPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const ContactsPage = ({ contacts, addContacts }) => {\r\n  /* Define state variables for contact info and duplicate check */\r\n  const [name, setName] = useState('');\r\n  const [phoneNumber, setPhoneNumber] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [duplicate, setDuplicate] = useState(false);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /* Add contact info and clear data if the contact name is not a duplicate */\r\n    if(!duplicate) {\r\n      addContacts(name, phoneNumber, email);\r\n      setName('');\r\n      setPhoneNumber('');\r\n      setEmail('');\r\n    }\r\n  };\r\n\r\n  /* Using hooks, check for contact name in the contacts array variable in props */\r\n  useEffect(() => {\r\n    const nameIsDuplicate = () => {\r\n      const found = contacts.find((contact) => contact.name === name);\r\n      if (found) {\r\n        return true\r\n      } else {\r\n        return false \r\n      }\r\n    };\r\n\r\n    if (nameIsDuplicate()) {\r\n      setDuplicate(true)\r\n    } else {\r\n      setDuplicate(false)\r\n    }\r\n  }, [name, contacts, duplicate]);\r\n\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact\r\n        {duplicate ? \" - Name Already Exists\" : \"\"}\r\n        </h2>\r\n        <ContactForm \r\n          name={name}\r\n          setName={setName}\r\n          phoneNumber={phoneNumber}\r\n          setPhoneNumber={setPhoneNumber}\r\n          email={email}\r\n          setEmail={setEmail}\r\n          handleSubmit={handleSubmit}\r\n        /> \r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList \r\n          tiles={contacts}\r\n        />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}